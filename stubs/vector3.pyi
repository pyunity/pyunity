from typing import Any, Callable, Iterable, List

class Vector3:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __getitem__(self) -> int: ...
    def __iter__(self) -> Iterable: ...
    def __list__(self) -> List[int]: ...
    def __len__(self) -> int: ...
    def __eq__(self, o: Vector3) -> bool: ...
    def __ne__(self, o: Vector3) -> bool: ...
    def __bool__(self) -> bool: ...
    def _o2(self, other: Any, f: Callable[[float, float], Vector3]) -> Vector3: ...
    def _r_o2(self, other: Any, f: Callable[[float, float], Vector3]) -> Vector3: ...
    def _io(self, other: Any, f: Callable[[float, float], Vector3]) -> Vector3: ...
    def __add__(self, other: Any) -> Vector3: ...
    def __radd__(self, other: Any) -> Vector3: ...
    def __iadd__(self, other: Any) -> Vector3: ...
    def __sub__(self, other: Any) -> Vector3: ...
    def __rsub__(self, other: Any) -> Vector3: ...
    def __isub__(self, other: Any) -> Vector3: ...
    def __mul__(self, other: Any) -> Vector3: ...
    def __rmul__(self, other: Any) -> Vector3: ...
    def __imul__(self, other: Any) -> Vector3: ...
    def __div__(self, other: Any) -> Vector3: ...
    def __rdiv__(self, other: Any) -> Vector3: ...
    def __idiv__(self, other: Any) -> Vector3: ...
    def __floordiv__(self, other: Any) -> Vector3: ...
    def __rfloordiv__(self, other: Any) -> Vector3: ...
    def __ifloordiv__(self, other: Any) -> Vector3: ...
    def __truediv__(self, other: Any) -> Vector3: ...
    def __rtruediv__(self, other: Any) -> Vector3: ...
    def __itruediv__(self, other: Any) -> Vector3: ...
    def __mod__(self, other: Any) -> Vector3: ...
    def __rmod__(self, other: Any) -> Vector3: ...
    def __imod__(self, other: Any) -> Vector3: ...
    def __lshift__(self, other: Any) -> Vector3: ...
    def __rlshift__(self, other: Any) -> Vector3: ...
    def __ilshift__(self, other: Any) -> Vector3: ...
    def __rshift__(self, other: Any) -> Vector3: ...
    def __rrshift__(self, other: Any) -> Vector3: ...
    def __irshift__(self, other: Any) -> Vector3: ...
    def __and__(self, other: Any) -> Vector3: ...
    def __rand__(self, other: Any) -> Vector3: ...
    def __or__(self, other: Any) -> Vector3: ...
    def __ror__(self, other: Any) -> Vector3: ...
    def __xor__(self, other: Any) -> Vector3: ...
    def __rxor__(self, other: Any) -> Vector3: ...
    def __neg__(self) -> Vector3: ...
    def __pos__(self) -> Vector3: ...
    def __abs__(self) -> Vector3: ...
    def __round__(self) -> Vector3: ...
    def __invert__(self) -> Vector3: ...
    def copy(self) -> Vector3: ...
    def get_length_sqrd(self) -> float: ...
    def normalized(self) -> Vector3: ...
    def normalize_return_length(self) -> float: ...
    def get_distance(self) -> float: ...
    def get_dist_sqrd(self) -> float: ...
    def clamp(self, min: Vector3, max: Vector3) -> None: ...
    def dot(self, other: Vector3) -> Vector3: ...
    def cross(self, other: Vector3) -> Vector3: ...

    @staticmethod
    def zero(self) -> Vector3: ...
    @staticmethod
    def one(self) -> Vector3: ...
    @staticmethod
    def forward(self) -> Vector3: ...
    @staticmethod
    def back(self) -> Vector3: ...
    @staticmethod
    def left(self) -> Vector3: ...
    @staticmethod
    def right(self) -> Vector3: ...
    @staticmethod
    def up(self) -> Vector3: ...
    @staticmethod
    def down(self) -> Vector3: ...

    @property
    def length(self) -> float: ...
    @property
    def int_tuple(self) -> tuple: ...
    @property
    def rounded(self) -> tuple: ...
