## Copyright (c) 2020-2023 The PyUnity Team
## This file is licensed under the MIT License.
## See https://docs.pyunity.x10.bz/en/latest/license.html

__all__ = ["Acos", "Asin", "Atan", "Atan2", "Ceil", "Clamp", "Clamp01", "Cos",
           "DEG_TO_RAD", "DeltaAngle", "EPSILON", "Exp", "Floor", "GLM_SUPPORT",
           "INFINITY", "InverseLerp", "Lerp", "LerpUnclamped", "Log",
           "NEG_INFINITY", "PI", "RAD_TO_DEG", "Sign", "Sin", "SmoothDamper",
           "SmoothStep", "Sqrt", "Tan"]

from typing import Callable, TypeVar, Any, Optional, TYPE_CHECKING

if TYPE_CHECKING:
    T = TypeVar("T", bound=Callable[..., Any])

GLM_SUPPORT: bool = ...
PI: float = ...
DEG_TO_RAD: float = ...
RAD_TO_DEG: float = ...
INFINITY: float = ...
NEG_INFINITY: float = ...
EPSILON: float = ...

def _wraps(orig: T, glmfunc: Optional[T] = ...) -> Callable[[T], T]: ...
def Acos(num: float) -> float: ...
def Asin(num: float) -> float: ...
def Atan(num: float) -> float: ...
def Atan2(x: float, y: float) -> float: ...
def Ceil(num: float) -> float: ...
def Clamp(num: float, a: float, b: float) -> float: ...
def Clamp01(num: float) -> float: ...
def Cos(num: float) -> float: ...
def DeltaAngle(a: float, b: float) -> float: ...
def Exp(num: float) -> float: ...
def Floor(num: float) -> float: ...
def InverseLerp(num: float, a: float, b: float) -> float: ...
def Lerp(num: float, a: float, b: float) -> float: ...
def LerpUnclamped(num: float, a: float, b: float) -> float: ...
def Log(num: float) -> float: ...
def Sign(num: float) -> float: ...
def Sin(num: float) -> float: ...
def SmoothStep(num: float) -> float: ...
def Sqrt(num: float) -> float: ...
def Tan(num: float) -> float: ...

class SmoothDamper:
    velocity: float
    maxSpeed: float
    def __init__(self, maxSpeed: float = ...) -> None: ...
    def SmoothDamp(self, current: float, target: float, smoothTime: float, dt: float) -> float: ...
    def Reset(self) -> None: ...
