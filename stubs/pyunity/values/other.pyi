## Copyright (c) 2020-2023 The PyUnity Team
## This file is licensed under the MIT License.
## See https://docs.pyunity.x10.bz/en/latest/license.html

__all__ = ["Clock", "IgnoredMixin", "ImmutableStruct", "IncludeInstanceMixin",
           "IncludeMixin", "LockedLiteral", "ModuleExportControlMixin",
           "SavableStruct", "StructEntry"]

from typing import (
    Optional, Any, Dict, Callable, TypeVar, Type, Tuple, Generic,
    Union, Mapping, List, TYPE_CHECKING)
from typing_extensions import ParamSpec

if TYPE_CHECKING:
    _P = ParamSpec("_P")
    _T = TypeVar("_T")
    _TWRAP = TypeVar("_TWRAP")

class ModuleExportControlMixin: ...
class IgnoredMixin(ModuleExportControlMixin): ...
class IncludeMixin(ModuleExportControlMixin): ...
class IncludeInstanceMixin(ModuleExportControlMixin): ...

class Clock:
    _fps: int = ...
    _frameDuration: float = ...

    def __init__(self) -> None: ...
    def Start(self, fps: Optional[int] = ...) -> None: ...
    def Maintain(self) -> float: ...

    @property
    def fps(self) -> float: ...
    @fps.setter
    def fps(self, value: float) -> None: ...

class LockedLiteral:
    _locked: bool
    def _lock(self) -> None: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __delattr__(self, name: str) -> None: ...

class SavableStruct(Generic[_TWRAP]):
    attrs: Dict[str, StructEntry]
    def __init__(self, **kwargs: StructEntry) -> None: ...
    def fromDict(self, factory: Callable[..., _TWRAP], attrs: Mapping[str, Any], instanceCheck: Optional[Callable[[Type[_T], _T], Tuple[Type[_T], _T]]] = ...) -> _TWRAP: ...
    def factoryWrapper(self, factory: Callable[_P, _TWRAP]) -> Callable[_P, _TWRAP]: ...
    def __call__(self, cls: Type[_TWRAP]) -> Type[_TWRAP]: ...

class StructEntry(Generic[_T]):
    class _ignoredEntry: ...

    ignore: _ignoredEntry = ...
    type: Type[_T]
    default: Union[_T, _ignoredEntry] = ...
    required: bool
    def __init__(self, type: Type[_T], default: Union[_T, _ignoredEntry] = ..., required: bool = ...) -> None: ...

class ImmutableStruct(type):
    _names: List[str]
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __delattr__(self, name: str) -> None: ...
    def _set(self, name: str, value: Any) -> None: ...
