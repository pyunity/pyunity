## Copyright (c) 2020-2023 The PyUnity Team
## This file is licensed under the MIT License.
## See https://docs.pyunity.x10.bz/en/latest/license.html

__all__ = ["IgnoredMixin", "IncludeMixin", "IncludeInstanceMixin",
           "Clock", "ImmutableStruct", "SavableStruct", "StructEntry",
           "LockedLiteral"]

from typing import Optional, Any, Dict, Callable, TypeVar, Type, Tuple, Generic, Union, Mapping
from ..events import Event

class IgnoredMixin: ...
class IncludeMixin: ...
class IncludeInstanceMixin: ...

class Clock:
    _fps: int = ...
    _frameDuration: float = ...

    def __init__(self) -> None: ...
    def Start(self, fps: Optional[int] = ...) -> None: ...
    def Maintain(self) -> float: ...

    @property
    def fps(self) -> float: ...
    @fps.setter
    def fps(self, value: float) -> None: ...

class LockedLiteral:
    _locked: bool
    def _lock(self) -> None: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __delattr__(self, name: str) -> None: ...

T = TypeVar("T")

class SavableStruct:
    attrs: Dict[str, Any]
    def __init__(self, **kwargs: Any) -> None: ...
    def fromDict(self, factory: Callable[..., object], attrs: Mapping[str, Any], instanceCheck: Optional[Callable[[Type[T], T], Tuple[Type[T], T]]]) -> object: ...
    def __call__(self, cls: Type[T]) -> Type[T]: ...

class StructEntry(Generic[T]):
    class _ignoredEntry: ...

    ignore: _ignoredEntry = ...
    type: Type[T]
    default: Union[T, _ignoredEntry] = ...
    required: bool
    def __init__(self, type: Type[T], default: Union[T, _ignoredEntry] = ..., required: bool = ...) -> None: ...

class ImmutableStruct(type):
    _names: str
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __delattr__(self, name: str) -> None: ...
    def _set(self, name: str, value: Any) -> None: ...
