## Copyright (c) 2020-2023 The PyUnity Team
## This file is licensed under the MIT License.
## See https://docs.pyunity.x10.bz/en/latest/license.html

__all__ = ["LiveDict", "Database"]

from typing import Dict, Iterator, Optional, Generic, TypeVar, TYPE_CHECKING
from collections.abc import KeysView, ValuesView, ItemsView
from pathlib import Path

if TYPE_CHECKING:
    _KT = TypeVar("_KT")
    _VT = TypeVar("_VT")

class LiveDict(Generic[_KT, _VT]):
    d: Dict[_KT, _VT]
    parent: Optional[LiveDict]
    def __init__(self, d: Dict, parent: Optional[LiveDict] = ...) -> None: ...
    def __getitem__(self, item: _KT) -> _VT: ...
    def __setitem__(self, item: _KT, value: _VT) -> None: ...
    def __delitem__(self, item: _KT) -> None: ...
    def __contains__(self, item: _VT) -> bool: ...
    def __iter__(self) -> Iterator[_VT]: ...
    def update(self) -> None: ...
    def todict(self) -> Dict[_KT, _VT]: ...
    def keys(self) -> KeysView: ...
    def values(self) -> ValuesView: ...
    def items(self) -> ItemsView: ...
    def pop(self, item: _KT) -> _VT: ...

class Database(LiveDict[_KT, _VT]):
    path: str
    def __init__(self, path: str) -> None: ...
    def update(self) -> None: ...
    def refresh(self) -> None: ...

file: Path = ...
db: Database = ...
