## Copyright (c) 2020-2023 The PyUnity Team
## This file is licensed under the MIT License.
## See https://docs.pyunity.x10.bz/en/latest/license.html

"""
Class to load, render and manage GameObjects
and their various components.

You should never use the :class:`Scene`
class directly, instead, only use
the SceneManager class.

"""

__all__ = ["Scene"]

from typing import Dict, List as _List, Type, TypeVar, Awaitable, Any, Optional
from ..render import Camera, Light
from ..core import GameObject, Component
from ..meshes import MeshRenderer
from ..audio import AudioListener
from ..events import EventLoop
from ..files import Asset

disallowedChars: set = ...

CT = TypeVar("CT", bound=Component)

def createTask(loop: EventLoop, coro: Awaitable[None], *args: Any) -> None: ...

class Scene(Asset):
    name: str
    mainCamera: Camera
    gameObjects: _List[GameObject]
    lights: _List[Light]
    lastFrame: float
    lastFixedFrame: float
    def __init__(self, name: str) -> None: ...
    @staticmethod
    def Bare(name: str) -> Scene: ...
    @property
    def rootGameObjects(self) -> _List[GameObject]: ...
    def Add(self, gameObject: GameObject) -> None: ...
    def AddMultiple(self, *args: GameObject) -> None: ...
    def Destroy(self, gameObject: GameObject) -> None: ...
    def Has(self, gameObject: GameObject) -> bool: ...
    def RegisterLight(self, light: Light) -> None: ...
    def List(self) -> None: ...
    def FindGameObjectsByName(self, name: str) -> _List[GameObject]: ...
    def FindGameObjectsByTagName(self, name: str) -> _List[GameObject]: ...
    def FindGameObjectsByTagNumber(self, num: int) -> _List[GameObject]: ...
    def FindComponent(self, component: Type[CT]) -> CT: ...
    def FindComponents(self, component: Type[CT]) -> _List[CT]: ...
    def insideFrustum(self, renderer: MeshRenderer) -> bool: ...
    def startOpenGL(self) -> None: ...
    def startScripts(self) -> None: ...
    def startLoop(self) -> None: ...
    def Start(self) -> None: ...
    def updateScripts(self, loop: EventLoop) -> None: ...
    def updateFixed(self, loop: EventLoop) -> None: ...
    def Render(self, loop: Optional[EventLoop] = ...) -> None: ...
    def cleanUp(self) -> None: ...
