## Copyright (c) 2020-2023 The PyUnity Team
## This file is licensed under the MIT License.
## See https://docs.pyunity.x10.bz/en/latest/license.html

"""
Core classes of the PyUnity
physics engine.

"""

__all__ = ["BoxCollider", "Collider", "Infinity", "Manifold",
           "PhysicMaterial", "Rigidbody", "SphereCollider"]

from typing import List, NoReturn, Optional
from ..values import Vector3, ABCMeta, abstractmethod, IgnoredMixin
from ..core import Component, Transform
from ..scenes import Scene

Infinity: float = ...

class PhysicMaterial:
    restitution: float
    friction: float
    staticFriction: float
    dynamicFriction: float
    combine: int
    def _setattrException(self, name: str, value: object) -> NoReturn: ...
    def __init__(self, restitution: float = ..., friction: float = ..., immutable: bool = ...) -> None: ...

class Manifold:
    a: Collider
    b: Collider
    normal: Vector3
    penetration: float
    def __init__(self, a: Collider, b: Collider, normal: Vector3, penetration: float) -> None: ...

class Collider(Component, metaclass=ABCMeta):
    @abstractmethod
    def collidingWith(self, other: Collider) -> Optional[Manifold]: ...

class SphereCollider(Collider):
    min: Vector3 = ...
    max: Vector3 = ...
    pos: Vector3 = ...
    radius: float = ...

    def __init__(self) -> None: ...
    def SetSize(self, radius: float, offset: Vector3) -> None: ...
    def CheckOverlap(self, other: Collider) -> bool: ...

class BoxCollider(Collider):
    min: Vector3 = ...
    max: Vector3 = ...
    pos: Vector3 = ...
    def __init__(self) -> None: ...
    def SetSize(self, min: Vector3, max: Vector3) -> None: ...
    def CheckOverlap(self, other: Collider) -> bool: ...

class Rigidbody(Component):
    mass: float = ...
    position: Vector3 = ...
    velocity: Vector3 = ...
    physicMaterial: PhysicMaterial = ...
    force: Vector3 = ...
    gravity: bool = ...

    def __init__(self, transform: Transform, dummy: bool = ...) -> None: ...
    def Move(self, dt: float) -> None: ...
    def MovePos(self, offset: Vector3) -> None: ...
    def AddForce(self, force: Vector3) -> None: ...
    def AddImpulse(self, impulse: Vector3) -> None: ...

class CollManager(IgnoredMixin):
    rigidbodies: dict[Rigidbody, List[Collider]]
    dummyRigidbody: Rigidbody
    steps: int

    def __init__(self) -> None: ...
    def AddPhysicsInfo(self, scene: Scene) -> None: ...
    def GetRestitution(self, a: Rigidbody, b: Rigidbody) -> float: ...
    def CheckCollisions(self) -> None: ...
    def correctInf(self, a: float, b: float, correction: float, target: float) -> float: ...
    def Step(self, dt: float) -> None: ...
