## Copyright (c) 2020-2023 The PyUnity Team
## This file is licensed under the MIT License.
## See https://docs.pyunity.x10.bz/en/latest/license.html

__all__ = ["AssetResolver", "PackageAssetResolver", "ZipAssetResolver"]

from .values import ABCMeta, abstractmethod
from typing import Union
from pathlib import Path

class AssetResolver(metaclass=ABCMeta):
    cache: Path
    def __init__(self, cache: Union[str, Path]) -> None: ...
    @abstractmethod
    def getSrcMtime(self, local: Path) -> float: ...
    def checkCacheExists(self, local: Path) -> bool: ...
    def checkCache(self, local: Path) -> bool: ...
    @abstractmethod
    def checkSrcExists(self, local: Path) -> bool: ...
    @abstractmethod
    def copyAsset(self, local: Path) -> None: ...
    def preFetch(self) -> None: ...
    def postFetch(self) -> None: ...
    def getPath(self, local: Union[str, Path]) -> Path: ...

class ZipAssetResolver(AssetResolver):
    src: Path
    prefix: Path
    def __init__(self, cache: Union[str, Path], src: Union[str, Path], prefix: Union[str, Path]) -> None: ...
    def preFetch(self) -> None: ...
    def postFetch(self) -> None: ...

class PackageAssetResolver(AssetResolver):
    package: Path
    def __init__(self, cache: Union[str, Path], package: Union[str, Path]) -> None: ...
    def postFetch(self) -> None: ...
    def checkCache(self, local: Path) -> bool: ...

directory: Path = ...
package: Path = ...
resolver: AssetResolver = ...
